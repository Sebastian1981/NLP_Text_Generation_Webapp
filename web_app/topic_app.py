import streamlit as st
import json
import pandas as pd
import re
import openai
from docx import Document


from utility import parse_date_from_html, \
                    parse_title_from_html, \
                    google_query, \
                    convert_df, \
                    generate_topic_instruction, \
                    generate_article_instruction, \
                    chatgpt_query, \
                    chatgpt_generate_text
                 

# get api key for chat gpt
try: # this is for local runtime
    with open('.\private.txt', 'r') as f:
        content = f.read()
        key = re.findall(r'\'.*?\'', content)[0].strip('\'')
        openai.api_key = key
    f.close()
except: # this is for streamlit cloud runtime
    # Access the password
    key = st.secrets["api_key"]
    openai.api_key = key

# cache the keyword list
keyword_list = st.cache(
    lambda: [])()


def run_generate_topics_app(): 

    # add keywords
    keyword_input = st.text_input('Enter keyword: ')
    if keyword_input:
        keyword_list.append(keyword_input)

    # select keywords
    keywords_selected = (st.multiselect("Select keywords", keyword_list))
    keywords_selected = list(set(keywords_selected)) # delete duplicates

    if st.button('Reset Keywords List'):
        keyword_list.clear()

    st.subheader("Generate Topics using Google Search and ChatGPT")
    num_results = st.slider('Number google hits per keyword?', 1, 20, 5)
    num_topics = st.slider('Select Number of Topics Generated by ChatGPT', 1, 20, 5)

    if st.button('Generate Topics'):

        ##################################################
        # GOOGLE SEARCH
        ##################################################
        df_titles_google = google_query(keywords_selected, num_results)

        ##################################################
        # ChatGPT Query
        ##################################################
        # make ChatGPT instruction
        instruction = generate_topic_instruction(keywords_selected, num_topics)
        # pass instruction to ChatGPT and generate topics
        df_titles_chatgpt = chatgpt_query(instruction, num_tokens=1000)
        #st.write(df_titles_chatgpt)
        df_titles = df_titles_google.append(df_titles_chatgpt)
        st.write(df_titles)
        # save string as file
        topics = df_titles['title']
        topic_string = ""
        for topic in topics:
            topic_string += "'" + topic + "'\n"
        with open('./web_app/topics_file.txt', "w") as f:
            f.write(topic_string)
    
        # download data
        st.download_button(
            label = "Download CSV",
            data = convert_df(df_titles),
            file_name='topics.csv',
            mime='text/csv')

    # select topic for text generation
    with open('./web_app/topics_file.txt', 'r') as f:
        topic_string = f.read()
    topics = topic_string.split('\n')
    topic_selected = st.selectbox("Select article topic", topics)
    num_article_words = st.slider('Select Number Tokens for ChatGPT', 100, 1000, 250)
    num_tokens = st.slider('Select Number Tokens for ChatGPT', 100, 2000, 1000)
        
    if st.button('Generate Article with ChatGPT'):
        instruction = generate_article_instruction(keywords_selected, 
                                                   topic_selected, 
                                                   num_article_words)
        st.write(instruction)
        text_seo = chatgpt_generate_text(instruction, num_tokens)
        st.write('ChatGPT suggests this SEO Text: \n', text_seo)
        
        st.download_button('Download SEO Text', 
                            text_seo)

            ## Save SEO Text as word file
            #document = Document()
            ## Create a new paragraph object.
            #paragraph = document.add_paragraph()
            ## Write the string to the paragraph object.
            #paragraph.add_run(text_seo)
            ## Save the document.
            #document.save('seo_text.docx')
            